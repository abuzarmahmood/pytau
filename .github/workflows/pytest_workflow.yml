name: Pytest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '**' ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11']
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    - name: Run tests
      run: |
        pytest --cov=pytau -v --tb=short --junitxml=test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
    - name: Run notebook tests
      run: |
        # Try to run notebooks with nbmake (should now work with dummy matplotlib)
        echo "Testing model notebooks..."
        pytest --nbmake pytau/how_to/model_notebooks/ -v --tb=short --junitxml=notebook-test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml

        # Test notebook structure without execution
        pytest tests/test_how_to_notebooks.py -v

        echo "Testing how-to notebooks..."
        pytest --nbmake pytau/how_to/notebooks/ -v --tb=short

        echo "Testing example notebooks..."
        pytest --nbmake pytau/how_to/examples/ -v --tb=short

        echo "Notebook testing completed"
      shell: bash
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
          notebook-test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml

  test-summary:
    needs: test
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        path: test-results
        pattern: test-results-*
        merge-multiple: true
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies for test summary
      run: |
        python -m pip install --upgrade pip
        pip install junitparser
    - name: Generate test summary
      run: |
        python .github/scripts/generate_test_summary.py
    - name: Update README with test results
      run: |
        python .github/scripts/update_readme_tests.py
    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: |
          test_summary.md
          test_results_table.md
    - name: Commit updated README
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        if git diff --staged --quiet; then
          echo "No changes to README - test results already up to date"
        else
          echo "Committing updated README with latest test results"
          git commit -m "Auto-update README with latest test results

          - Updated test results table with latest CI run
          - Generated by GitHub Actions workflow

          [skip ci]"
          git push
        fi

  execute-notebooks:
    needs: test-summary
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    - name: Execute notebooks and save outputs
      run: |
        echo "Executing model notebooks with outputs..."
        for notebook in pytau/how_to/model_notebooks/*.ipynb; do
          echo "Executing $(basename "$notebook")..."
          jupyter nbconvert --to notebook --execute "$notebook" --inplace --ExecutePreprocessor.timeout=300
        done
        echo "All notebooks executed successfully!"
    - name: Upload executed notebooks as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executed-notebooks-${{ github.sha }}
        path: pytau/how_to/model_notebooks/*.ipynb
        retention-days: 30
    - name: Commit executed notebooks (main branch only)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pytau/how_to/model_notebooks/*.ipynb
        if git diff --staged --quiet; then
          echo "No changes to commit - notebooks already up to date"
        else
          echo "Committing updated notebooks with execution outputs"
          git commit -m "Auto-update model notebooks with execution outputs

          - Executed all model notebooks with latest code
          - Preserved outputs for documentation and review
          - Generated by GitHub Actions workflow

          [skip ci]"
          git push
        fi
